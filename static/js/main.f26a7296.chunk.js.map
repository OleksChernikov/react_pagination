{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","totalPageCount","Math","ceil","pageNumber","i","push","className","href","length","onClick","map","number","items","from","to","numbers","n","getNumbers","optionNumbers","App","useState","setCurrentPage","setPerPage","firstItem","lastItem","min","visibleElems","firstPageIndex","lastPageIndex","slice","visibleElements","id","value","onChange","event","parseInt","target","option","htmlFor","page","item","ReactDOM","render","document","getElementById"],"mappings":"8KASaA,EAAwC,SAAC,GASpD,IAJK,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAyBC,KAAKC,KAAKN,EAAQC,GAC3CM,EAAuB,GAEpBC,EAAI,EAAGA,GAAKJ,EAAgBI,GAAK,EACxCD,EAAWE,KAAKD,GAelB,OACE,mCACE,qBAAIE,UAAU,aAAd,UACE,oBAAIA,UAAS,oBAAeR,IAAgBK,EAAW,IAAM,YAA7D,SACE,mBACE,UAAQ,WACRG,UAAU,YACVC,KAAK,QACL,gBACET,IAAiBK,EAAWK,OAAS,EAEvCC,QAjBS,WACbX,IAAgBK,EAAW,IAC7BJ,EAAaD,EAAc,IAQvB,oBAaDK,EAAWO,KAAI,SAAAC,GAAM,OACpB,oBAAIL,UAAS,oBAAeR,IAAgBa,GAAU,UAAtD,SACE,mBACE,UAAQ,WACRL,UAAU,YACVC,KAAI,WAAMI,GACVF,QAAS,kBAAMV,EAAaY,IAJ9B,SAMGA,KAPkEA,MAYzE,oBAAIL,UAAS,oBAAeR,IAAiBK,EAAWK,QAAW,YAAnE,SACE,mBACE,UAAQ,WACRF,UAAU,YACVC,KAAK,QACL,gBACET,IAAiBK,EAAWK,OAAS,EAEvCC,QAAS,WAjDbX,IAAiBK,EAAWK,QAC9BT,EAAaD,EAAc,IAyCvB,0BC3DJc,ECNC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQV,KAAKW,GAGf,OAAOD,EDDKE,CAAW,EADX,IAEXP,KAAI,SAAAM,GAAC,qBAAYA,MACdE,EAAgB,CAAC,EAAG,EAAG,GAAI,IAEpBC,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOtB,EAAP,KAAoBuB,EAApB,KACA,EAA8BD,mBAAS,GAAvC,mBAAOvB,EAAP,KAAgByB,EAAhB,KACMC,GAAazB,EAAc,GAAKD,EAAU,EAC1C2B,EAAWvB,KAAKwB,IAAI3B,EAAcD,EAAS,IAS3C6B,EAPkB,WACtB,IAAMC,GAAkB7B,EAAc,GAAKD,EACrC+B,EAAgBD,EAAiB9B,EAEvC,OAAOe,EAAMiB,MAAMF,EAAgBC,GAGhBE,GAErB,OACE,sBAAKxB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWR,EADX,mBACiCyB,EADjC,cACgDC,EADhD,eAxBQ,GAwBR,OAIA,sBAAKlB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRyB,GAAG,kBACHzB,UAAU,eACV0B,MAAOnC,EACPoC,SAAU,SAACC,GACTZ,EAAWa,SAASD,EAAME,OAAOJ,MAAO,KACxCX,EAAe,IAPnB,SAUGH,EAAcR,KAAI,SAAC2B,GAAD,OACjB,wBAAqBL,MAAOK,EAA5B,SACGA,GADUA,UAOnB,uBAAOC,QAAQ,kBAAkBhC,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAtDM,GAuDNC,QAASA,EACTC,YAAaA,EACbC,aAAc,SAACwC,GAAD,OAAkBlB,EAAekB,MAEhDb,EAAahB,KAAI,SAAC8B,GAAD,OAChB,6BACE,oBAAI,UAAQ,OAAZ,SAAoBA,KADbA,UE9DjBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.f26a7296.chunk.js","sourcesContent":["import React from 'react';\n\ninterface PaginationProps {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPageCount: number = Math.ceil(total / perPage);\n  const pageNumber: number[] = [];\n\n  for (let i = 1; i <= totalPageCount; i += 1) {\n    pageNumber.push(i);\n  }\n\n  const onNext = () => {\n    if (currentPage !== (pageNumber.length)) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  const onPrevious = () => {\n    if (currentPage !== pageNumber[0]) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={`page-item ${currentPage === pageNumber[0] && 'disabled'}`}>\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={\n              currentPage === (pageNumber.length - 1)\n            }\n            onClick={onPrevious}\n          >\n            «\n          </a>\n        </li>\n\n        {pageNumber.map(number => (\n          <li className={`page-item ${currentPage === number && 'active'}`} key={number}>\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${number}`}\n              onClick={() => onPageChange(number)}\n            >\n              {number}\n            </a>\n          </li>\n        ))}\n\n        <li className={`page-item ${currentPage === (pageNumber.length) && 'disabled'}`}>\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={\n              currentPage === (pageNumber.length - 1)\n            }\n            onClick={() => onNext()}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst total = 42;\nconst items = getNumbers(1, total)\n  .map(n => `Item ${n}`);\nconst optionNumbers = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const firstItem = (currentPage - 1) * perPage + 1;\n  const lastItem = Math.min(currentPage * perPage, 42);\n\n  const visibleElements = () => {\n    const firstPageIndex = (currentPage - 1) * perPage;\n    const lastPageIndex = firstPageIndex + perPage;\n\n    return items.slice(firstPageIndex, lastPageIndex);\n  };\n\n  const visibleElems = visibleElements();\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItem} - ${lastItem} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => {\n              setPerPage(parseInt(event.target.value, 10));\n              setCurrentPage(1);\n            }}\n          >\n            {optionNumbers.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={(page: number) => setCurrentPage(page)}\n      />\n      {visibleElems.map((item) => (\n        <ul key={item}>\n          <li data-cy=\"item\">{item}</li>\n        </ul>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}